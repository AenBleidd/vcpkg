diff --git a/gdk-pixbuf/gdk-pixbuf-io.c b/gdk-pixbuf/gdk-pixbuf-io.c
index e207d8143..66d33aa3a 100644
--- a/gdk-pixbuf/gdk-pixbuf-io.c
+++ b/gdk-pixbuf/gdk-pixbuf-io.c
@@ -63,16 +63,16 @@
  * @save: saves a `GdkPixbuf` to a file.
  * @save_to_callback: saves a `GdkPixbuf` by calling the given `GdkPixbufSaveFunc`.
  * @is_save_option_supported: returns whether a save option key is supported by the module
- * 
+ *
  * A `GdkPixbufModule` contains the necessary functions to load and save
  * images in a certain file format.
- * 
+ *
  * If `GdkPixbuf` has been compiled with `GModule` support, it can be extended
  * by modules which can load (and perhaps also save) new image and animation
  * formats.
  *
  * ## Implementing modules
- * 
+ *
  * The `GdkPixbuf` interfaces needed for implementing modules are contained in
  * `gdk-pixbuf-io.h` (and `gdk-pixbuf-animation.h` if the module supports
  * animations). They are not covered by the same stability guarantees as the
@@ -82,15 +82,15 @@
  * Each loadable module must contain a `GdkPixbufModuleFillVtableFunc` function
  * named `fill_vtable`, which will get called when the module
  * is loaded and must set the function pointers of the `GdkPixbufModule`.
- * 
+ *
  * In order to make format-checking work before actually loading the modules
  * (which may require calling `dlopen` to load image libraries), modules export
  * their signatures (and other information) via the `fill_info` function. An
  * external utility, `gdk-pixbuf-query-loaders`, uses this to create a text
  * file containing a list of all available loaders and  their signatures.
  * This file is then read at runtime by `GdkPixbuf` to obtain the list of
- * available loaders and their signatures. 
- * 
+ * available loaders and their signatures.
+ *
  * Modules may only implement a subset of the functionality available via
  * `GdkPixbufModule`. If a particular functionality is not implemented, the
  * `fill_vtable` function will simply not set the corresponding
@@ -100,7 +100,7 @@
  * can supply a generic `load` implementation wrapping the incremental loading.
  *
  * ## Installing modules
- * 
+ *
  * Installing a module is a two-step process:
  *
  *  - copy the module file(s) to the loader directory (normally
@@ -111,7 +111,7 @@
  *    by the environment variable `GDK_PIXBUF_MODULE_FILE`)
  */
 
-static gint 
+static gint
 format_check (GdkPixbufModule *module, guchar *buffer, int size)
 {
         int i, j;
@@ -151,9 +151,9 @@ format_check (GdkPixbufModule *module, guchar *buffer, int size)
                                         if (buffer[i + j] == 0)
                                                 break;
                                 }
-                        } 
+                        }
 
-                        if (prefix[j] == 0) 
+                        if (prefix[j] == 0)
                                 return pattern->relevance;
 
                         if (anchored)
@@ -178,7 +178,7 @@ get_file_formats (void)
             !file_formats_inited)
                 file_formats_inited = gdk_pixbuf_io_init ();
         G_UNLOCK (init_lock);
-        
+
         return file_formats;
 }
 
@@ -240,7 +240,7 @@ gdk_pixbuf_get_toplevel (void)
 #endif  /* GDK_PIXBUF_RELOCATABLE */
 
 
-#ifdef USE_GMODULE 
+#ifdef USE_GMODULE
 
 static gboolean
 scan_string (const char **pos, GString *out)
@@ -248,10 +248,10 @@ scan_string (const char **pos, GString *out)
         const char *p = *pos, *q = *pos;
         char *tmp, *tmp2;
         gboolean quoted;
-        
+
         while (g_ascii_isspace (*p))
                 p++;
-        
+
         if (!*p)
                 return FALSE;
         else if (*p == '"') {
@@ -262,7 +262,7 @@ scan_string (const char **pos, GString *out)
                                 return FALSE;
                         quoted = (*q == '\\') && !quoted;
                 }
-                
+
                 tmp = g_strndup (p, q - p);
                 tmp2 = g_strcompress (tmp);
                 g_string_truncate (out, 0);
@@ -270,10 +270,10 @@ scan_string (const char **pos, GString *out)
                 g_free (tmp);
                 g_free (tmp2);
         }
-        
+
         q++;
         *pos = q;
-        
+
         return TRUE;
 }
 
@@ -283,26 +283,26 @@ scan_int (const char **pos, int *out)
         int i = 0;
         char buf[32];
         const char *p = *pos;
-        
+
         while (g_ascii_isspace (*p))
                 p++;
-        
+
         if (*p < '0' || *p > '9')
                 return FALSE;
-        
+
         while ((*p >= '0') && (*p <= '9') && i < sizeof (buf)) {
                 buf[i] = *p;
                 i++;
                 p++;
         }
-        
+
         if (i == sizeof (buf))
                 return FALSE;
         else
                 buf[i] = '\0';
-        
+
         *out = atoi (buf);
-        
+
         *pos = p;
 
         return TRUE;
@@ -312,12 +312,12 @@ static gboolean
 skip_space (const char **pos)
 {
         const char *p = *pos;
-        
+
         while (g_ascii_isspace (*p))
                 p++;
-  
+
         *pos = p;
-        
+
         return !(*p == '\0');
 }
 
@@ -409,10 +409,10 @@ gdk_pixbuf_io_init_modules (const char  *filename,
         }
 
         num_formats = g_slist_length (file_formats);
-        
+
         while (!have_error && g_io_channel_read_line (channel, &line_buf, NULL, &term, NULL) == G_IO_STATUS_NORMAL) {
                 const char *p;
-                
+
                 p = line_buf;
 
                 line_buf[term] = 0;
@@ -423,20 +423,20 @@ gdk_pixbuf_io_init_modules (const char  *filename,
                                 file_formats = g_slist_prepend (file_formats, module);
                                 module = NULL;
                         }
-                        
+
                         goto next_line;
                 }
 
-                if (*p == '#') 
+                if (*p == '#')
                         goto next_line;
-                
+
                 if (!module) {
                         /* Read a module location */
                         module = g_new0 (GdkPixbufModule, 1);
                         n_patterns = 0;
-                        
+
                         if (!scan_string (&p, tmp_buf)) {
-                                g_warning ("Error parsing loader info in '%s'\n  %s", 
+                                g_warning ("Error parsing loader info in '%s'\n  %s",
                                            filename, line_buf);
                                 have_error = TRUE;
                         }
@@ -445,7 +445,7 @@ gdk_pixbuf_io_init_modules (const char  *filename,
                 else if (!module->module_name) {
                         module->info = g_new0 (GdkPixbufFormat, 1);
                         if (!scan_string (&p, tmp_buf)) {
-                                g_warning ("Error parsing loader info in '%s'\n  %s", 
+                                g_warning ("Error parsing loader info in '%s'\n  %s",
                                            filename, line_buf);
                                 have_error = TRUE;
                         }
@@ -454,25 +454,25 @@ gdk_pixbuf_io_init_modules (const char  *filename,
 
                         flags = 0;
                         if (!scan_int (&p, &flags)) {
-                                g_warning ("Error parsing loader info in '%s'\n  %s", 
+                                g_warning ("Error parsing loader info in '%s'\n  %s",
                                            filename, line_buf);
                                 have_error = TRUE;
                         }
                         module->info->flags = flags;
-                        
+
                         if (!scan_string (&p, tmp_buf)) {
-                                g_warning ("Error parsing loader info in '%s'\n  %s", 
+                                g_warning ("Error parsing loader info in '%s'\n  %s",
                                            filename, line_buf);
                                 have_error = TRUE;
-                        }                       
+                        }
                         if (tmp_buf->str[0] != 0)
                                 module->info->domain = g_strdup (tmp_buf->str);
 
                         if (!scan_string (&p, tmp_buf)) {
-                                g_warning ("Error parsing loader info in '%s'\n  %s", 
+                                g_warning ("Error parsing loader info in '%s'\n  %s",
                                            filename, line_buf);
                                 have_error = TRUE;
-                        }                       
+                        }
                         module->info->description = g_strdup (tmp_buf->str);
 
                         if (scan_string (&p, tmp_buf)) {
@@ -517,24 +517,24 @@ gdk_pixbuf_io_init_modules (const char  *filename,
                         if (!scan_string (&p, tmp_buf))
                                 goto context_error;
                         pattern->prefix = g_strdup (tmp_buf->str);
-                        
+
                         if (!scan_string (&p, tmp_buf))
                                 goto context_error;
                         if (*tmp_buf->str)
                                 pattern->mask = g_strdup (tmp_buf->str);
                         else
                                 pattern->mask = NULL;
-                        
+
                         if (!scan_int (&p, &pattern->relevance))
                                 goto context_error;
-                        
+
                         goto next_line;
 
                 context_error:
                         g_free (pattern->prefix);
                         g_free (pattern->mask);
                         g_free (pattern);
-                        g_warning ("Error parsing loader info in '%s'\n  %s", 
+                        g_warning ("Error parsing loader info in '%s'\n  %s",
                                    filename, line_buf);
                         have_error = TRUE;
                 }
@@ -695,6 +695,7 @@ module (xbm);
 module (tga);
 module (icns);
 module (qtif);
+module (svg);
 module (gdip_ico);
 module (gdip_wmf);
 module (gdip_emf);
@@ -715,7 +716,7 @@ gdk_pixbuf_load_module_unlocked (GdkPixbufModule *image_module,
 {
         GdkPixbufModuleFillInfoFunc fill_info = NULL;
         GdkPixbufModuleFillVtableFunc fill_vtable = NULL;
-                
+
         if (image_module->module != NULL)
                return TRUE;
 
@@ -777,9 +778,10 @@ gdk_pixbuf_load_module_unlocked (GdkPixbufModule *image_module,
 #ifdef INCLUDE_qtif
         try_module (qtif,qtif);
 #endif
+try_module(svg,svg);
 
 #undef try_module
-        
+
         if (fill_vtable) {
                 image_module->module = (void *) 1;
                 (* fill_vtable) (image_module);
@@ -789,7 +791,7 @@ gdk_pixbuf_load_module_unlocked (GdkPixbufModule *image_module,
                 }
                 return TRUE;
         }
-        else 
+        else
 #ifdef USE_GMODULE
         {
                 char *path;
@@ -810,8 +812,8 @@ gdk_pixbuf_load_module_unlocked (GdkPixbufModule *image_module,
                         return FALSE;
                 }
 
-                image_module->module = module;        
-        
+                image_module->module = module;
+
                 if (g_module_symbol (module, "fill_vtable", &sym)) {
                         fill_vtable = (GdkPixbufModuleFillVtableFunc) sym;
                         (* fill_vtable) (image_module);
@@ -876,7 +878,7 @@ _gdk_pixbuf_get_named_module (const char *name,
                      GDK_PIXBUF_ERROR_UNKNOWN_TYPE,
                      _("Image type “%s” is not supported"),
                      name);
-        
+
         return NULL;
 }
 
@@ -942,10 +944,10 @@ _gdk_pixbuf_get_module (guchar *buffer, guint size,
 
                 score = format_check (module, buffer, size);
                 if (score > best) {
-                        best = score; 
+                        best = score;
                         selected = module;
                 }
-                if (score >= 100) 
+                if (score >= 100)
                         break;
         }
 #endif
@@ -983,7 +985,7 @@ _gdk_pixbuf_get_module_for_file (FILE *f, const gchar *filename, GError **error)
         size = fread (&buffer, 1, sizeof (buffer), f);
         if (size == 0) {
 		gchar *display_name;
-        	display_name = g_filename_display_name (filename);      
+        	display_name = g_filename_display_name (filename);
                 g_set_error (error,
                              GDK_PIXBUF_ERROR,
                              GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
@@ -1004,8 +1006,8 @@ noop_size_notify (gint     *width,
 }
 
 static void
-prepared_notify (GdkPixbuf *pixbuf, 
-                 GdkPixbufAnimation *anim, 
+prepared_notify (GdkPixbuf *pixbuf,
+                 GdkPixbufAnimation *anim,
                  gpointer user_data)
 {
         if (pixbuf != NULL)
@@ -1030,10 +1032,10 @@ generic_load_incrementally (GdkPixbufModule *module, FILE *f, GError **error)
 	gpointer context;
 
 	context = module->begin_load (noop_size_notify, prepared_notify, noop_updated_notify, &pixbuf, error);
-        
+
 	if (!context)
 		goto out;
-                
+
 	while (!feof (f) && !ferror (f)) {
 		guchar buffer[LOAD_BUFFER_SIZE];
 		size_t length;
@@ -1117,12 +1119,12 @@ gdk_pixbuf_new_from_file (const char *filename,
 
         g_return_val_if_fail (filename != NULL, NULL);
         g_return_val_if_fail (error == NULL || *error == NULL, NULL);
-        
+
         f = g_fopen (filename, "rb");
         if (!f) {
                 gint save_errno = errno;
 		gchar *display_name;
-        	display_name = g_filename_display_name (filename);      
+        	display_name = g_filename_display_name (filename);
                 g_set_error (error,
                              G_FILE_ERROR,
                              g_file_error_from_errno (save_errno),
@@ -1157,7 +1159,7 @@ gdk_pixbuf_new_from_file (const char *filename,
                  */
 
 		gchar *display_name;
-        	display_name = g_filename_display_name (filename);      
+        	display_name = g_filename_display_name (filename);
                 g_warning ("Bug! gdk-pixbuf loader '%s' didn't set an error on failure.", image_module->module_name);
                 g_set_error (error,
                              GDK_PIXBUF_ERROR,
@@ -1171,7 +1173,7 @@ gdk_pixbuf_new_from_file (const char *filename,
 		gchar  *old;
 		gchar *display_name;
 
-        	display_name = g_filename_display_name (filename);      
+        	display_name = g_filename_display_name (filename);
 		old = e->message;
 		e->message = g_strdup_printf (_("Failed to load image “%s”: %s"),
 					      display_name,
@@ -1240,12 +1242,12 @@ gdk_pixbuf_new_from_file_utf8 (const char *filename,
  **/
 GdkPixbuf *
 gdk_pixbuf_new_from_file_at_size (const char *filename,
-                                  int         width, 
+                                  int         width,
                                   int         height,
                                   GError    **error)
 {
-        return gdk_pixbuf_new_from_file_at_scale (filename, 
-                                                  width, height, 
+        return gdk_pixbuf_new_from_file_at_scale (filename,
+                                                  width, height,
                                                   TRUE, error);
 }
 
@@ -1283,7 +1285,7 @@ typedef struct {
         gint width;
         gint height;
         gboolean preserve_aspect_ratio;
-} AtScaleData; 
+} AtScaleData;
 
 static void
 at_scale_data_async_data_free (AtScaleData *data)
@@ -1292,7 +1294,7 @@ at_scale_data_async_data_free (AtScaleData *data)
 }
 
 static void
-at_scale_size_prepared_cb (GdkPixbufLoader *loader, 
+at_scale_size_prepared_cb (GdkPixbufLoader *loader,
                            int              width,
                            int              height,
                            gpointer         data)
@@ -1301,7 +1303,7 @@ at_scale_size_prepared_cb (GdkPixbufLoader *loader,
 
         g_return_if_fail (width > 0 && height > 0);
 
-        if (info->preserve_aspect_ratio && 
+        if (info->preserve_aspect_ratio &&
             (info->width > 0 || info->height > 0)) {
                 if (info->width < 0)
                 {
@@ -1327,7 +1329,7 @@ at_scale_size_prepared_cb (GdkPixbufLoader *loader,
                 if (info->height > 0)
                         height = info->height;
         }
-        
+
         width = MAX (width, 1);
         height = MAX (height, 1);
 
@@ -1357,7 +1359,7 @@ at_scale_size_prepared_cb (GdkPixbufLoader *loader,
  * The error domains are `GDK_PIXBUF_ERROR` and `G_FILE_ERROR`.
  *
  * The image will be scaled to fit in the requested size, optionally preserving
- * the image's aspect ratio. 
+ * the image's aspect ratio.
  *
  * When preserving the aspect ratio, a `width` of -1 will cause the image
  * to be scaled to the exact given height, and a `height` of -1 will cause
@@ -1372,7 +1374,7 @@ at_scale_size_prepared_cb (GdkPixbufLoader *loader,
  **/
 GdkPixbuf *
 gdk_pixbuf_new_from_file_at_scale (const char *filename,
-                                   int         width, 
+                                   int         width,
                                    int         height,
                                    gboolean    preserve_aspect_ratio,
                                    GError    **error)
@@ -1412,7 +1414,7 @@ gdk_pixbuf_new_from_file_at_scale (const char *filename,
         info.height = height;
         info.preserve_aspect_ratio = preserve_aspect_ratio;
 
-        g_signal_connect (loader, "size-prepared", 
+        g_signal_connect (loader, "size-prepared",
                           G_CALLBACK (at_scale_size_prepared_cb), &info);
 
         has_frame = FALSE;
@@ -1425,7 +1427,7 @@ gdk_pixbuf_new_from_file_at_scale (const char *filename,
                                 g_object_unref (loader);
                                 return NULL;
                         }
-                
+
                 animation = gdk_pixbuf_loader_get_animation (loader);
                 if (animation) {
                         iter = gdk_pixbuf_animation_get_iter (animation, NULL);
@@ -1506,11 +1508,11 @@ load_from_stream (GdkPixbufLoader  *loader,
         gssize n_read;
         guchar buffer[LOAD_BUFFER_SIZE];
 
-        while (1) { 
-                n_read = g_input_stream_read (stream, 
-                                              buffer, 
-                                              sizeof (buffer), 
-                                              cancellable, 
+        while (1) {
+                n_read = g_input_stream_read (stream,
+                                              buffer,
+                                              sizeof (buffer),
+                                              cancellable,
                                               error);
                 if (n_read < 0) {
                         gdk_pixbuf_loader_close (loader, NULL);
@@ -1520,9 +1522,9 @@ load_from_stream (GdkPixbufLoader  *loader,
                 if (n_read == 0)
                         break;
 
-                if (!gdk_pixbuf_loader_write (loader, 
-                                              buffer, 
-                                              n_read, 
+                if (!gdk_pixbuf_loader_write (loader,
+                                              buffer,
+                                              n_read,
                                               error)) {
                         gdk_pixbuf_loader_close (loader, NULL);
                         return NULL;
@@ -1549,15 +1551,15 @@ load_from_stream (GdkPixbufLoader  *loader,
  * @cancellable: (allow-none): optional `GCancellable` object, `NULL` to ignore
  * @error: Return location for an error
  *
- * Creates a new pixbuf by loading an image from an input stream.  
+ * Creates a new pixbuf by loading an image from an input stream.
  *
  * The file format is detected automatically. If `NULL` is returned, then
  * @error will be set. The @cancellable can be used to abort the operation
- * from another thread. If the operation was cancelled, the error 
+ * from another thread. If the operation was cancelled, the error
  * `G_IO_ERROR_CANCELLED` will be returned. Other possible errors are in
  * the `GDK_PIXBUF_ERROR` and `G_IO_ERROR` domains.
  *
- * The image will be scaled to fit in the requested size, optionally 
+ * The image will be scaled to fit in the requested size, optionally
  * preserving the image's aspect ratio.
  *
  * When preserving the aspect ratio, a `width` of -1 will cause the image to be
@@ -1592,7 +1594,7 @@ gdk_pixbuf_new_from_stream_at_scale (GInputStream  *stream,
         info.height = height;
         info.preserve_aspect_ratio = preserve_aspect_ratio;
 
-        g_signal_connect (loader, "size-prepared", 
+        g_signal_connect (loader, "size-prepared",
                           G_CALLBACK (at_scale_size_prepared_cb), &info);
 
         pixbuf = load_from_stream (loader, stream, cancellable, error);
@@ -1621,7 +1623,7 @@ load_from_stream_async_cb (GObject      *stream,
                 gdk_pixbuf_loader_close (loader, NULL);
                 g_task_return_error (task, error);
         } else if (g_bytes_get_size (bytes) > 0) {
-                if (!gdk_pixbuf_loader_write (loader, 
+                if (!gdk_pixbuf_loader_write (loader,
                                               g_bytes_get_data (bytes, NULL),
                                               g_bytes_get_size (bytes),
                                               &error)) {
@@ -1630,7 +1632,7 @@ load_from_stream_async_cb (GObject      *stream,
                         goto out;
                 }
                 g_input_stream_read_bytes_async (G_INPUT_STREAM (stream),
-                                                 LOAD_BUFFER_SIZE, 
+                                                 LOAD_BUFFER_SIZE,
                                                  G_PRIORITY_DEFAULT,
                                                  g_task_get_cancellable (task),
                                                  load_from_stream_async_cb,
@@ -1695,10 +1697,10 @@ gdk_pixbuf_new_from_stream_at_scale_async (GInputStream        *stream,
 	data->preserve_aspect_ratio = preserve_aspect_ratio;
 
         loader = gdk_pixbuf_loader_new ();
-        g_signal_connect (loader, "size-prepared", 
+        g_signal_connect (loader, "size-prepared",
                           G_CALLBACK (at_scale_size_prepared_cb), data);
         g_object_set_data_full (G_OBJECT (loader),
-                                "gdk-pixbuf-please-kill-me-later", 
+                                "gdk-pixbuf-please-kill-me-later",
                                 data,
                                 (GDestroyNotify) at_scale_data_async_data_free);
 
@@ -1707,7 +1709,7 @@ gdk_pixbuf_new_from_stream_at_scale_async (GInputStream        *stream,
 	g_task_set_task_data (task, loader, g_object_unref);
 
         g_input_stream_read_bytes_async (stream,
-                                         LOAD_BUFFER_SIZE, 
+                                         LOAD_BUFFER_SIZE,
                                          G_PRIORITY_DEFAULT,
                                          cancellable,
                                          load_from_stream_async_cb,
@@ -1720,7 +1722,7 @@ gdk_pixbuf_new_from_stream_at_scale_async (GInputStream        *stream,
  * @cancellable: (allow-none): optional `GCancellable` object, `NULL` to ignore
  * @error: Return location for an error
  *
- * Creates a new pixbuf by loading an image from an input stream.  
+ * Creates a new pixbuf by loading an image from an input stream.
  *
  * The file format is detected automatically.
  *
@@ -1904,7 +1906,7 @@ gdk_pixbuf_new_from_stream_async (GInputStream        *stream,
         g_task_set_task_data (task, gdk_pixbuf_loader_new (), g_object_unref);
 
         g_input_stream_read_bytes_async (stream,
-                                         LOAD_BUFFER_SIZE, 
+                                         LOAD_BUFFER_SIZE,
                                          G_PRIORITY_DEFAULT,
                                          cancellable,
                                          load_from_stream_async_cb,
@@ -1941,7 +1943,7 @@ gdk_pixbuf_new_from_stream_finish (GAsyncResult  *async_result,
 }
 
 static void
-info_cb (GdkPixbufLoader *loader, 
+info_cb (GdkPixbufLoader *loader,
          int              width,
          int              height,
          gpointer         data)
@@ -1966,9 +1968,9 @@ info_cb (GdkPixbufLoader *loader,
  * @filename: (type filename): The name of the file to identify.
  * @width: (optional) (out): Return location for the width of the image
  * @height: (optional) (out): Return location for the height of the image
- * 
+ *
  * Parses an image file far enough to determine its format and size.
- * 
+ *
  * Returns: (nullable) (transfer none): A `GdkPixbufFormat` describing
  *   the image format of the file
  *
@@ -1976,7 +1978,7 @@ info_cb (GdkPixbufLoader *loader,
  **/
 GdkPixbufFormat *
 gdk_pixbuf_get_file_info (const gchar  *filename,
-                          gint         *width, 
+                          gint         *width,
                           gint         *height)
 {
         GdkPixbufLoader *loader;
@@ -2000,7 +2002,7 @@ gdk_pixbuf_get_file_info (const gchar  *filename,
         info.format = NULL;
         info.width = -1;
         info.height = -1;
-                
+
         g_signal_connect (loader, "size-prepared", G_CALLBACK (info_cb), &info);
 
         while (!feof (f) && !ferror (f)) {
@@ -2017,9 +2019,9 @@ gdk_pixbuf_get_file_info (const gchar  *filename,
         gdk_pixbuf_loader_close (loader, NULL);
         g_object_unref (loader);
 
-        if (width) 
+        if (width)
                 *width = info.width;
-        if (height) 
+        if (height)
                 *height = info.height;
 
         return info.format;
@@ -2203,7 +2205,7 @@ collect_save_options (va_list   opts,
   count = 0;
   *keys = NULL;
   *vals = NULL;
-  
+
   next = va_arg (opts, gchar*);
   while (next)
     {
@@ -2215,13 +2217,13 @@ collect_save_options (va_list   opts,
       /* woo, slow */
       *keys = g_realloc (*keys, sizeof(gchar*) * (count + 1));
       *vals = g_realloc (*vals, sizeof(gchar*) * (count + 1));
-      
+
       (*keys)[count-1] = g_strdup (key);
       (*vals)[count-1] = g_strdup (val);
 
       (*keys)[count] = NULL;
       (*vals)[count] = NULL;
-      
+
       next = va_arg (opts, gchar*);
     }
 }
@@ -2249,21 +2251,21 @@ save_to_file_callback (const gchar *buf,
 }
 
 static gboolean
-gdk_pixbuf_real_save (GdkPixbuf     *pixbuf, 
-                      FILE          *filehandle, 
-                      const char    *type, 
+gdk_pixbuf_real_save (GdkPixbuf     *pixbuf,
+                      FILE          *filehandle,
+                      const char    *type,
                       gchar        **keys,
                       gchar        **values,
                       GError       **error)
 {
         gboolean ret;
-        GdkPixbufModule *image_module = NULL;       
+        GdkPixbufModule *image_module = NULL;
 
         image_module = _gdk_pixbuf_get_named_module (type, error);
 
         if (image_module == NULL)
                 return FALSE;
-       
+
         if (!_gdk_pixbuf_load_module (image_module, error))
                 return FALSE;
 
@@ -2342,7 +2344,7 @@ save_to_callback_with_tmp_file (GdkPixbufModule   *image_module,
                         if (!save_func (buf, n, error, user_data))
                                 goto end;
                 }
-                if (n != TMP_FILE_BUF_SIZE) 
+                if (n != TMP_FILE_BUF_SIZE)
                         break;
         }
         if (ferror (f)) {
@@ -2372,31 +2374,31 @@ static gboolean
 gdk_pixbuf_real_save_to_callback (GdkPixbuf         *pixbuf,
                                   GdkPixbufSaveFunc  save_func,
                                   gpointer           user_data,
-                                  const char        *type, 
+                                  const char        *type,
                                   gchar            **keys,
                                   gchar            **values,
                                   GError           **error)
 {
         gboolean ret;
-        GdkPixbufModule *image_module = NULL;       
+        GdkPixbufModule *image_module = NULL;
 
         image_module = _gdk_pixbuf_get_named_module (type, error);
 
         if (image_module == NULL)
                 return FALSE;
-       
+
         if (!_gdk_pixbuf_load_module (image_module, error))
                 return FALSE;
 
         if (image_module->save_to_callback) {
                 /* save normally */
-                ret = (* image_module->save_to_callback) (save_func, user_data, 
+                ret = (* image_module->save_to_callback) (save_func, user_data,
                                                           pixbuf, keys, values,
                                                           error);
         } else if (image_module->save) {
                 /* use a temporary file */
                 ret = save_to_callback_with_tmp_file (image_module, pixbuf,
-                                                      save_func, user_data, 
+                                                      save_func, user_data,
                                                       keys, values,
                                                       error);
         } else {
@@ -2412,7 +2414,7 @@ gdk_pixbuf_real_save_to_callback (GdkPixbuf         *pixbuf,
         return ret;
 }
 
- 
+
 /**
  * gdk_pixbuf_save:
  * @pixbuf: a `GdkPixbuf`.
@@ -2421,9 +2423,9 @@ gdk_pixbuf_real_save_to_callback (GdkPixbuf         *pixbuf,
  * @error: (nullable): return location for error
  * @...: list of key-value save options, followed by `NULL`
  *
- * Saves pixbuf to a file in format @type. By default, "jpeg", "png", "ico" 
+ * Saves pixbuf to a file in format @type. By default, "jpeg", "png", "ico"
  * and "bmp" are possible file formats to save in, but more formats may be
- * installed. The list of all writable formats can be determined in the 
+ * installed. The list of all writable formats can be determined in the
  * following way:
  *
  * ```c
@@ -2432,7 +2434,7 @@ gdk_pixbuf_real_save_to_callback (GdkPixbuf         *pixbuf,
  *   if (gdk_pixbuf_format_is_writable (data))
  *     *list = g_slist_prepend (*list, data);
  * }
- * 
+ *
  * GSList *formats = gdk_pixbuf_get_formats ();
  * GSList *writable_formats = NULL;
  * g_slist_foreach (formats, add_if_writable, &writable_formats);
@@ -2496,9 +2498,9 @@ gdk_pixbuf_real_save_to_callback (GdkPixbuf         *pixbuf,
  * Return value: `TRUE` on success, and `FALSE` otherwise
  **/
 gboolean
-gdk_pixbuf_save (GdkPixbuf  *pixbuf, 
-                 const char *filename, 
-                 const char *type, 
+gdk_pixbuf_save (GdkPixbuf  *pixbuf,
+                 const char *filename,
+                 const char *type,
                  GError    **error,
                  ...)
 {
@@ -2508,11 +2510,11 @@ gdk_pixbuf_save (GdkPixbuf  *pixbuf,
         gboolean result;
 
         g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
-        
+
         va_start (args, error);
-        
+
         collect_save_options (args, &keys, &values);
-        
+
         va_end (args);
 
         result = gdk_pixbuf_savev (pixbuf, filename, type,
@@ -2546,8 +2548,8 @@ gdk_pixbuf_save (GdkPixbuf  *pixbuf,
  **/
 
 gboolean
-gdk_pixbuf_savev (GdkPixbuf  *pixbuf, 
-                  const char *filename, 
+gdk_pixbuf_savev (GdkPixbuf  *pixbuf,
+                  const char *filename,
                   const char *type,
                   char      **option_keys,
                   char      **option_values,
@@ -2555,7 +2557,7 @@ gdk_pixbuf_savev (GdkPixbuf  *pixbuf,
 {
         FILE *f = NULL;
         gboolean result;
-       
+
         g_return_val_if_fail (GDK_IS_PIXBUF (pixbuf), FALSE);
         g_return_val_if_fail (gdk_pixbuf_get_width (pixbuf) >= 0, FALSE);
         g_return_val_if_fail (gdk_pixbuf_get_height (pixbuf) >= 0, FALSE);
@@ -2563,9 +2565,9 @@ gdk_pixbuf_savev (GdkPixbuf  *pixbuf,
         g_return_val_if_fail (filename != NULL, FALSE);
         g_return_val_if_fail (type != NULL, FALSE);
         g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
-       
+
         f = g_fopen (filename, "wb");
-        
+
         if (f == NULL) {
                 gint save_errno = errno;
                 gchar *display_name = g_filename_display_name (filename);
@@ -2579,12 +2581,12 @@ gdk_pixbuf_savev (GdkPixbuf  *pixbuf,
                 return FALSE;
         }
 
-       
+
        result = gdk_pixbuf_real_save (pixbuf, f, type,
                                       option_keys, option_values,
                                       error);
-       
-       
+
+
        if (!result) {
                g_return_val_if_fail (error == NULL || *error != NULL, FALSE);
                fclose (f);
@@ -2604,7 +2606,7 @@ gdk_pixbuf_savev (GdkPixbuf  *pixbuf,
                g_free (display_name);
                return FALSE;
        }
-       
+
        return TRUE;
 }
 
@@ -2667,7 +2669,7 @@ gboolean
 gdk_pixbuf_save_to_callback    (GdkPixbuf  *pixbuf,
                                 GdkPixbufSaveFunc save_func,
                                 gpointer user_data,
-                                const char *type, 
+                                const char *type,
                                 GError    **error,
                                 ...)
 {
@@ -2675,13 +2677,13 @@ gdk_pixbuf_save_to_callback    (GdkPixbuf  *pixbuf,
         gchar **values = NULL;
         va_list args;
         gboolean result;
-        
+
         g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
-        
+
         va_start (args, error);
-        
+
         collect_save_options (args, &keys, &values);
-        
+
         va_end (args);
 
         result = gdk_pixbuf_save_to_callbackv (pixbuf, save_func, user_data,
@@ -2719,7 +2721,7 @@ gdk_pixbuf_save_to_callback    (GdkPixbuf  *pixbuf,
  * Since: 2.4
  **/
 gboolean
-gdk_pixbuf_save_to_callbackv   (GdkPixbuf  *pixbuf, 
+gdk_pixbuf_save_to_callbackv   (GdkPixbuf  *pixbuf,
                                 GdkPixbufSaveFunc save_func,
                                 gpointer user_data,
                                 const char *type,
@@ -2728,7 +2730,7 @@ gdk_pixbuf_save_to_callbackv   (GdkPixbuf  *pixbuf,
                                 GError    **error)
 {
         gboolean result;
-        
+
         g_return_val_if_fail (GDK_IS_PIXBUF (pixbuf), FALSE);
         g_return_val_if_fail (gdk_pixbuf_get_width (pixbuf) >= 0, FALSE);
         g_return_val_if_fail (gdk_pixbuf_get_height (pixbuf) >= 0, FALSE);
@@ -2736,12 +2738,12 @@ gdk_pixbuf_save_to_callbackv   (GdkPixbuf  *pixbuf,
         g_return_val_if_fail (save_func != NULL, FALSE);
         g_return_val_if_fail (type != NULL, FALSE);
         g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
-       
+
        result = gdk_pixbuf_real_save_to_callback (pixbuf,
                                                   save_func, user_data, type,
                                                   option_keys, option_values,
                                                   error);
-       
+
        if (!result) {
                g_return_val_if_fail (error == NULL || *error != NULL, FALSE);
                return FALSE;
@@ -2783,7 +2785,7 @@ gboolean
 gdk_pixbuf_save_to_buffer      (GdkPixbuf  *pixbuf,
                                 gchar     **buffer,
                                 gsize      *buffer_size,
-                                const char *type, 
+                                const char *type,
                                 GError    **error,
                                 ...)
 {
@@ -2791,13 +2793,13 @@ gdk_pixbuf_save_to_buffer      (GdkPixbuf  *pixbuf,
         gchar **values = NULL;
         va_list args;
         gboolean result;
-        
+
         g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
-        
+
         va_start (args, error);
-        
+
         collect_save_options (args, &keys, &values);
-        
+
         va_end (args);
 
         result = gdk_pixbuf_save_to_bufferv (pixbuf, buffer, buffer_size,
@@ -2869,7 +2871,7 @@ gboolean
 gdk_pixbuf_save_to_bufferv     (GdkPixbuf  *pixbuf,
                                 gchar     **buffer,
                                 gsize      *buffer_size,
-                                const char *type, 
+                                const char *type,
                                 char      **option_keys,
                                 char      **option_values,
                                 GError    **error)
@@ -2925,9 +2927,9 @@ save_to_stream (const gchar  *buffer,
         while (remaining > 0) {
                 buffer += written;
                 remaining -= written;
-                written = g_output_stream_write (sdata->stream, 
-                                                 buffer, remaining, 
-                                                 sdata->cancellable, 
+                written = g_output_stream_write (sdata->stream,
+                                                 buffer, remaining,
+                                                 sdata->cancellable,
                                                  &my_error);
                 if (written < 0) {
                         if (!my_error) {
@@ -2998,7 +3000,7 @@ gdk_pixbuf_save_to_streamv (GdkPixbuf      *pixbuf,
  *
  * Saves `pixbuf` to an output stream.
  *
- * Supported file formats are currently "jpeg", "tiff", "png", "ico" or 
+ * Supported file formats are currently "jpeg", "tiff", "png", "ico" or
  * "bmp". See `gdk_pixbuf_save_to_buffer()` for more details.
  *
  * The `cancellable` can be used to abort the operation from another
@@ -3233,8 +3235,8 @@ gdk_pixbuf_save_to_stream_finish (GAsyncResult  *async_result,
  * @format: a `GdkPixbufFormat`
  *
  * Returns the name of the format.
- * 
- * Return value: the name of the format. 
+ *
+ * Return value: the name of the format.
  *
  * Since: 2.2
  */
@@ -3251,7 +3253,7 @@ gdk_pixbuf_format_get_name (GdkPixbufFormat *format)
  * @format: a `GdkPixbufFormat`
  *
  * Returns a description of the format.
- * 
+ *
  * Return value: a description of the format.
  *
  * Since: 2.2
@@ -3263,9 +3265,9 @@ gdk_pixbuf_format_get_description (GdkPixbufFormat *format)
         const gchar *description;
         g_return_val_if_fail (format != NULL, NULL);
 
-        if (format->domain != NULL) 
+        if (format->domain != NULL)
                 domain = format->domain;
-        else 
+        else
                 domain = GETTEXT_PACKAGE;
         description = g_dgettext (domain, format->description);
 
@@ -3277,7 +3279,7 @@ gdk_pixbuf_format_get_description (GdkPixbufFormat *format)
  * @format: a `GdkPixbufFormat`
  *
  * Returns the mime types supported by the format.
- * 
+ *
  * Return value: (transfer full) (array zero-terminated=1): an array of mime types
  *
  * Since: 2.2
@@ -3294,9 +3296,9 @@ gdk_pixbuf_format_get_mime_types (GdkPixbufFormat *format)
  * gdk_pixbuf_format_get_extensions:
  * @format: a `GdkPixbufFormat`
  *
- * Returns the filename extensions typically used for files in the 
+ * Returns the filename extensions typically used for files in the
  * given format.
- * 
+ *
  * Return value: (transfer full) (array zero-terminated=1): an array of
  *   filename extensions
  *
@@ -3315,7 +3317,7 @@ gdk_pixbuf_format_get_extensions (GdkPixbufFormat *format)
  * @format: a `GdkPixbufFormat`
  *
  * Returns whether pixbufs can be saved in the given format.
- * 
+ *
  * Return value: whether pixbufs can be saved in the given format.
  *
  * Since: 2.2
@@ -3337,7 +3339,7 @@ gdk_pixbuf_format_is_writable (GdkPixbufFormat *format)
  * If a file is in a scalable format, it is preferable to load it at
  * the desired size, rather than loading it at the default size and
  * scaling the resulting pixbuf to the desired size.
- * 
+ *
  * Return value: whether this image format is scalable.
  *
  * Since: 2.6
@@ -3357,17 +3359,17 @@ gdk_pixbuf_format_is_scalable (GdkPixbufFormat *format)
  * Returns whether this image format is disabled.
  *
  * See gdk_pixbuf_format_set_disabled().
- * 
+ *
  * Return value: whether this image format is disabled.
  *
  * Since: 2.6
  */
-gboolean   
+gboolean
 gdk_pixbuf_format_is_disabled (GdkPixbufFormat *format)
 {
         g_return_val_if_fail (format != NULL, FALSE);
 
-        return format->disabled;        
+        return format->disabled;
 }
 
 /**
@@ -3385,12 +3387,12 @@ gdk_pixbuf_format_is_disabled (GdkPixbufFormat *format)
  *
  * Since: 2.6
  */
-void 
+void
 gdk_pixbuf_format_set_disabled (GdkPixbufFormat *format,
                                 gboolean         disabled)
 {
         g_return_if_fail (format != NULL);
-        
+
         format->disabled = disabled != FALSE;
 }
 
